module Main exposing (Person, Animal, Maybe, Just, Nothing)

import Core as C exposing Any

# Defined at language core
interface Any {} 

struct Person {
  let name: String
  let age: Maybe(Int)

  def sayHello(name: String): String {
    print("hello " + name + ", my name is " + self.name)
  }

  def !!(name: String): String {
    print("HELLO, " + name)
  }
}

struct Animal {
  def sayHello(name: String): String {
    print("auau " + name)
  }
}

type Maybe('a) = # Defined at language core
  | Just('a)
  | Nothing

interface Polite {
  sayHello(String): String
}

def greet(p: Polite): String {
  p.sayHello("User")
}

def main(): Any {
  let siri = Person { name: "Siri", age: Nothing }
  siri.sayHello "User"
  
  greet siri

  siri !! "User"
}
